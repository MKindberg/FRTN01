package ballBeamRegul;

import SimEnvironment.AnalogSink;
import SimEnvironment.AnalogSource;
import beamRegulator.PI;
import beamRegulator.ReferenceGenerator;

// BallAndBeamRegul class to be written by you
public class BallAndBeamRegul extends Thread {

	private AnalogSource analogInAngle;
	private AnalogSource analogInPosition;
	private AnalogSink analogOut;
	private AnalogSink analogRef;

	private double uMin = -10.0;
	private double uMax = 10.0;

	private PI PIController;
	private PID PIDController;

	private ReferenceGenerator refgen;

	// Constructor
	public BallAndBeamRegul(ReferenceGenerator refgen, BallAndBeam bb, int priority) {
		this.refgen = refgen;

		analogInPosition = bb.getSource(0);
		analogInAngle = bb.getSource(1);
		analogOut = bb.getSink(0);
		analogRef = bb.getSink(1);

		PIController = new PI("PI");
		PIDController = new PID("PID");

		setPriority(priority);

	}

	public void run() {
		long t = System.currentTimeMillis();
		while (!Thread.interrupted()) {
			// Code to perform IO
			double y = analogInAngle.get();
			double ref = refgen.getRef();

			synchronized (controller) {
				double u = controller.calculateOutput(y, ref);
				u = Math.min(u, uMax);
				u = Math.max(u, uMin);
				analogOut.set(u);
				controller.updateState(u);
			}

			analogRef.set(ref);

			t += controller.getHMillis();
			long duration = t - System.currentTimeMillis();
			try {
				Thread.sleep(duration);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("BeamRegulator stopped.");
	}
}