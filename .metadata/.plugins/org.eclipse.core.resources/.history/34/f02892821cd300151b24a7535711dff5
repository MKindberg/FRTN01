// PI class to be written by you
public class PI {
	// Current PI parameters
	private PIParameters p;

	// Constructor
	public PI(String name) {

	}

	// Calculates the control signal v.
	// Called from BeamRegul.
	public synchronized double calculateOutput(double y, double yref) {
		double e = yref - y;
		double P = p.K * e;
		if (p.integratorOn)
			I += p.K * p.H / p.Ti * e;
		return 0;
	}

	// Updates the controller state.
	// Should use tracking-based anti-windup
	// Called from BeamRegul.
	public synchronized void updateState(double u) {
	}

	// Returns the sampling interval expressed as a long.
	// Note: Explicit type casting needed
	public synchronized long getHMillis() {
		return (long) (p.H*1000);
	}

	// Sets the PIParameters.
	// Called from PIGUI.
	// Must clone newParameters.
	public synchronized void setParameters(PIParameters newParameters) {
		p=newParameters;
	}
}